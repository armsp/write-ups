#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <map>
#include <string>

uint8_t op_info[] = {
	0x00, 0x41, 0x42, 0x43, 0xc4, 0xc5, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b,
	0x4c, 0x4d, 0x52, 0x13, 0x94, 0x55, 0x56, 0x97, 0x98, 0x59, 0x5a, 0x5b,
	0x5c, 0x1f, 0x4e, 0x4f, 0x50, 0x51, 0x1d, 0x1e
};

uint8_t rom[] = {
	 0x05, 0x00, 0x25, 0x00, 0x04, 0x00, 0x20, 0x3a,
	 0x01, 0x00, 0x05, 0x00, 0x64, 0x72, 0x04, 0x00, 0x6f, 0x77, 0x01, 0x00, 0x05, 0x00, 0x73, 0x73,
	 0x04, 0x00, 0x61, 0x50, 0x01, 0x00, 0x04, 0x50, 0x00, 0x88, 0x12, 0x50, 0x03, 0x06, 0x04, 0x10,
	 0x00, 0x0a, 0x04, 0x50, 0x00, 0xa8, 0x12, 0x50, 0x04, 0x50, 0x01, 0x20, 0x12, 0x50, 0x67, 0xc6,
	 0x05, 0x40, 0xff, 0xff, 0x04, 0x40, 0xff, 0xee, 0x0d, 0x20, 0x16, 0x24, 0x18, 0x00, 0x12, 0x13,
	 0x04, 0x50, 0x00, 0x50, 0x12, 0x50, 0x69, 0x73, 0x0a, 0x11, 0x04, 0x10, 0x00, 0x0a, 0x05, 0x00,
	 0x45, 0x00, 0x04, 0x00, 0x21, 0x74, 0x01, 0x00, 0x05, 0x00, 0x63, 0x65, 0x04, 0x00, 0x72, 0x72,
	 0x01, 0x00, 0x05, 0x00, 0x6f, 0x63, 0x04, 0x00, 0x6e, 0x49, 0x01, 0x00, 0x03, 0x06, 0x04, 0x50,
	 0x00, 0xa8, 0x0a, 0x44, 0x12, 0x50, 0x14, 0x00, 0x21, 0x00, 0x00, 0x00, 0x14, 0x00, 0x21, 0x51,
	 0x04, 0x10, 0x00, 0x04, 0x04, 0x50, 0x00, 0xa8, 0x1d, 0x18, 0x00, 0x26, 0x13, 0xff, 0x4a, 0xec,
	 0x05, 0x00, 0x21, 0x72, 0x04, 0x00, 0x72, 0x45, 0x01, 0x00, 0x03, 0x06, 0x12, 0x50, 0x1f, 0x29,
	 0x01, 0x20, 0x00, 0x00, 0x16, 0x14, 0x18, 0x00, 0x2d, 0x02, 0x20, 0x13, 0x06, 0x20, 0x1c, 0x20,
	 0x04, 0x30, 0x00, 0x01, 0x08, 0x03, 0x09, 0x13, 0x14, 0x00, 0x2b, 0xcd, 0x0a, 0x22, 0x01, 0x00,
	 0x01, 0x10, 0x04, 0x50, 0x00, 0x88, 0x12, 0x50, 0x04, 0x50, 0x00, 0x01, 0x03, 0x06, 0x08, 0x01,
	 0x06, 0x00, 0x00, 0x00, 0x16, 0x04, 0x18, 0x00, 0x3b, 0x04, 0x40, 0x00, 0x00, 0x08, 0x61, 0x08,
	 0x61, 0x13, 0xba, 0xab, 0x1b, 0x30, 0x07, 0x23, 0x08, 0x25, 0x09, 0x05, 0x14, 0x00, 0x37, 0xf2,
	 0x0a, 0x11, 0x04, 0x10, 0x00, 0x08, 0x05, 0x00, 0x20, 0x74, 0x04, 0x00, 0x63, 0x65, 0x01, 0x00,
	 0x05, 0x00, 0x72, 0x72, 0x04, 0x00, 0x6f, 0x43, 0x01, 0x00, 0x03, 0x06, 0x04, 0x50, 0x00, 0xa8,
	 0x0a, 0x44, 0x12, 0x50, 0x1f, 0xfb, 0xe3, 0x46, 0x04, 0x00, 0x00, 0x11, 0x04, 0x50, 0x00, 0xc4,
	 0x12, 0x50, 0x04, 0x30, 0x00, 0x02, 0x04, 0x50, 0x00, 0x38, 0x12, 0x50, 0x04, 0x50, 0x01, 0x8c,
	 0x12, 0x50, 0x18, 0x00, 0x61, 0x04, 0x50, 0x01, 0xb0, 0x12, 0x50, 0x18, 0x00, 0x61, 0x04, 0x50,
	 0x01, 0xcc, 0x12, 0x50, 0x18, 0x00, 0x61, 0x04, 0x50, 0x02, 0x0c, 0x12, 0x50, 0x18, 0x00, 0x61,
	 0x04, 0x50, 0x02, 0x34, 0x12, 0x50, 0x18, 0x00, 0x61, 0x04, 0x50, 0x02, 0x5c, 0x12, 0x50, 0x18,
	 0x00, 0x61, 0x04, 0x50, 0x02, 0x70, 0x12, 0x50, 0x18, 0x00, 0x61, 0x04, 0x50, 0x02, 0x88, 0x12,
	 0x50, 0x18, 0x00, 0x61, 0x04, 0x50, 0x00, 0xf8, 0x12, 0x50, 0x7c, 0xc2, 0x04, 0x50, 0x00, 0x50,
	 0x12, 0x50, 0x54, 0xf8, 0x04, 0x50, 0x00, 0x88, 0x12, 0x50, 0x06, 0x40, 0x0d, 0x20, 0x10, 0x42,
	 0x05, 0x10, 0x3d, 0x67, 0x04, 0x10, 0x82, 0xa5, 0x0a, 0x41, 0x05, 0x10, 0x5d, 0xd5, 0x04, 0x10,
	 0x3c, 0x4f, 0x16, 0x14, 0x13, 0x1b, 0xe8, 0xe7, 0x08, 0x03, 0x06, 0x40, 0x05, 0x10, 0x23, 0x25,
	 0x04, 0x10, 0xdb, 0xf8, 0x08, 0x41, 0x05, 0x10, 0x53, 0x6d, 0x04, 0x10, 0x3b, 0x6d, 0x16, 0x14,
	 0x13, 0x8d, 0x76, 0x5a, 0x08, 0x03, 0x06, 0x40, 0x0a, 0x22, 0x04, 0x10, 0x00, 0x10, 0x04, 0x50,
	 0x00, 0x54, 0x0e, 0x51, 0x0c, 0x25, 0x04, 0x10, 0x00, 0x00, 0x04, 0x50, 0x00, 0x47, 0x0e, 0x51,
	 0x0c, 0x25, 0x04, 0x10, 0x00, 0x08, 0x04, 0x50, 0x00, 0x30, 0x0e, 0x51, 0x0c, 0x25, 0x04, 0x10,
	 0x00, 0x18, 0x04, 0x50, 0x00, 0x5f, 0x0e, 0x51, 0x0c, 0x25, 0x09, 0x42, 0x0a, 0x22, 0x16, 0x24,
	 0x11, 0x51, 0x13, 0x2e, 0x04, 0x50, 0xe2, 0xbd, 0x08, 0x03, 0x06, 0x40, 0x05, 0x50, 0x20, 0x59,
	 0x0c, 0x15, 0x0a, 0x41, 0x0a, 0x55, 0x04, 0x50, 0xbd, 0xe9, 0x09, 0x45, 0x04, 0x50, 0x00, 0x10,
	 0x11, 0x45, 0x04, 0x50, 0x07, 0x4c, 0x09, 0x45, 0x16, 0x24, 0x13, 0x63, 0x04, 0x50, 0x00, 0x88,
	 0x12, 0x50, 0x08, 0x03, 0x06, 0x40, 0x04, 0x50, 0x00, 0x13, 0x11, 0x45, 0x05, 0x10, 0x38, 0x15,
	 0x04, 0x10, 0xcf, 0xb2, 0x10, 0x15, 0x0a, 0x41, 0x05, 0x10, 0x93, 0x17, 0x04, 0x10, 0xee, 0xe5,
	 0x16, 0x14, 0x13, 0x33, 0x08, 0x03, 0x06, 0x40, 0x09, 0x41, 0x05, 0x20, 0xd4, 0x19, 0x04, 0x20,
	 0x83, 0x7a, 0x16, 0x24, 0x13, 0x9f, 0xc9, 0x9a, 0x08, 0x03, 0x06, 0x40, 0x08, 0x12, 0x09, 0x14,
	 0x11, 0x10, 0x05, 0x40, 0xb2, 0xef, 0x04, 0x40, 0x2c, 0x90, 0x16, 0x14, 0x13, 0x66, 0x32, 0x0d,
	 0x08, 0x03, 0x06, 0x40, 0x0a, 0x40, 0x0a, 0x41, 0x0a, 0x42, 0x0a, 0x43, 0x05, 0x20, 0x66, 0xd7,
	 0x04, 0x20, 0xdb, 0x8e, 0x16, 0x24, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x20, 0x00, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
	 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x20, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const char *opnames [] = {
	"OPCODE_0",
	"PUSH",
	"POP",
	"MOV",
	"MOV.L",
	"MOV.H",
	"GET",
	"PUT",
	"ADD",
	"SUB",
	"XOR",
	"AND",
	"OR",
	"COMP",
	"SHL",
	"OPCODE_f",
	"ROL",
	"ROR",//11
	"CALL",
	"RET",
	"JUMP_t4",
	"JUMP",
	"CMP",
	"JS",
	"JNZ",
	"OPCODE_19",
	"OPCODE_1a",
	"READ",
	"PUTS",
	"NOT",
	"OPCODE_1e",
	"OPCODE_1f",
	"OPCODE_20",
	"OPCODE_21",
};

std::map<int, int> op_len;

const char *regnames[] = {
	"R0",
	"R1",
	"R2",
	"R3",
	"R4",
	"R5",
	"SP",
	"IP"
};

int get_op1(unsigned char op)
{
	return (op >> 4) & 7;
}

const char* get_opname1(unsigned char operand)
{
	return regnames[get_op1(operand)];
}

int get_op2(unsigned char op)
{
	return op & 7;
}

const char* get_opname2(unsigned char operand)
{
	return regnames[get_op2(operand)];
}


void disas(int offs)
{
	int i = offs;
	while (i<sizeof(rom)) {
		int op = rom[i];
		int oper = op & 0x3f;
		printf("%04x OP: %02x (ROM: %02x) ", i, oper, op);
		printf("%s ", opnames[op]);
		int len = op_len[op];
		//printf(" len = %d ", len);
		if (op_len[op]==0) {
			printf("STOP\n");
			break;
		}
		int j = i + op_len[op];
		int k = i+1;
		switch (op) {
		case 1:
			printf(" %s\n", get_opname1(rom[k]));
			break;
		case 0xd:
			printf(" %s\n", get_opname1(rom[k]));
			break;			
		case 0x12:
			printf(" %s\n", get_opname1(rom[k]));
			break;
		case 0x1b:
			printf(" %s\n", get_opname1(rom[k]));
			break;
			
		case 0x14:
			printf(" %04x\n", (rom[k]<<8|rom[k+1])*4);
			break;
		case 0x1c: //puts
			printf(" %s\n", get_opname1(rom[k]));
			break;
			
		case 0x18:
			printf(" %04x\n", (rom[k]<<8|rom[k+1])*4);
			break;
		case 3://mov from op2 to op1
			printf(" %s, %s\n", get_opname1(rom[k]), get_opname2(rom[k]));
			break;
		case 6://get target, [sp+reg]
			printf(" %s, [sp+%s]\n", get_opname1(rom[k]), get_opname2(rom[k]));
			break;			
		case 7://put target, [sp+reg]
			printf(" %s, [sp+%s]\n", get_opname2(rom[k]), get_opname1(rom[k]));
			break;			

		case 0xe://pow2 
			printf(" %s * 2^^ %s\n", get_opname1(rom[k]), get_opname2(rom[k]));
			break;			
			
		case 0x8://add
			printf(" %s, %s\n", get_opname1(rom[k]), get_opname2(rom[k]));
			break;			

		case 0x9://sub
			printf(" %s, %s\n", get_opname1(rom[k]), get_opname2(rom[k]));
			break;			

		case 0x10:
			printf(" %s, %s\n", get_opname1(rom[k]), get_opname2(rom[k]));
			break;			

		case 0x11:
			printf(" %s, %s\n", get_opname1(rom[k]), get_opname2(rom[k]));
			break;			
			

		case 0xa://xor
			printf(" %s, %s\n", get_opname1(rom[k]), get_opname2(rom[k]));
			break;			

		case 0xc://or
			printf(" %s, %s\n", get_opname1(rom[k]), get_opname2(rom[k]));
			break;			
			
		case 0x16://cmp
			printf(" %s, %s\n", get_opname1(rom[k]), get_opname2(rom[k]));
			break;			
		case 4:
			printf(" %s, %02x%02x (%c%c)\n", get_opname1(rom[k]), rom[k+1], rom[k+2], rom[k+1], rom[k+2]);
			break;
		case 5:
			printf(" %s, %02x%02x (%c%c)\n", get_opname1(rom[k]), rom[k+1], rom[k+2], rom[k+1], rom[k+2]);
			break;

		default:
			while (k<j) {
				printf("%02x ", (unsigned char)rom[k]);
				k++;
			}
			printf("\n");
		}

		i += op_len[op];
	}
	printf("-----\n");

}

int main(int argc, char *argv[])
{


	for (int i =0; i < sizeof(op_info); i++) {
		int op = op_info[i] & 0x3f;
		int len = ((((op_info[i]&0xf0)>>4)>>2) & 0x03) + 1;
		op_len[op] = len;
		printf("%d op: %02x len: %d\n", i, op, len);
	}
	//exit(0);
	disas(0);
	disas(0x38);
	disas(0x50);		
	disas(0x88);
	disas(0x98);	
	disas(0xa8);
	disas(0xc4);
	disas(0xec);	
	disas(0xf8);	
	disas(0x120);
	disas(0x184);	
	disas(0x18c);
	disas(0x1b0);
	disas(0x1cc);
	disas(0x20c);
	disas(0x234);
	disas(0x25c);
	disas(0x270);
	disas(0x288);

	return 0;
}
